# Scalar values assignment
i = 1  # expects: int  ### i: int
r = 1.4  # expects: float  ### r: float
b = True  # expects: bool
n = None  # expects: NoneType  ### n: NoneType
s = "Hello"  # expects: str  ### s: str

# List value assignments
alist = []  # expects: list  ### alist: list
ilist = [1, 2]  # expects: list<int>  ### ilist: list<int>
rlist = [1.1, 1.2]  # expects: list<float>  ### rlist: list<float>
nlist = [1, 2.5]  # expects: list<_numeric>  ### nlist: list<_numeric>
vlist = [1, None]  # expects: list  ### vlist: list

# Tuples assignment and values reuse
a, b = 1, 2  # expects: a: int, b: int
a = i  # expects: int
b = r  # expects: float
a, b = r, i  # expects: a: float, b: int

# Arithmetics operations
a = 1 + 2  # expects: int  ### a: int
b = 1 + r  # expects: float  ### b: float
c = s * 2  # expects: str  ### c: str

# Value methods call
sl = s.lower()  # expects: str  ### sl: str
sil = s.islower()  # expects: bool  ### sil: bool

# Built-in functions call
abs_1 = abs(123)  # expects: int  ### abs_1: int
abs_2 = abs(123.34)  # expects: float  ### abs_2: float
all_1 = all([])  # expects: bool  ### all_1: bool
all_2 = all([1,2,3])  # expects: bool  ### all_2: bool
any_1 = any([])  # expects: bool  ### any_1: bool
any_2 = any([1,2,3])  # expects: bool  ### any_2: bool
ascii_1 = ascii(123)  # expects: str  ### ascii_1: str
ascii_2 = ascii("Hello")  # expects: str  ### ascii_2: str
bin_1 = bin(123)  # expects: str  ### bin_1: str
bin_2 = bin(True)  # expects: str  ### bin_2: str
chr_1 = chr(123)  # expects: str  ### chr_1: str
chr_2 = chr(False)  # expects: str  ### chr_2: str
dir_1 = dir()  # expects: [ str ]  ### dir_1: [ str ]
dir_2 = dir(123)  # expects: [ str ]  ### dir_2: [ str ]
divmod_1 = divmod(1,2)  # expects: (int, int)  ### divmod_1: (int, int)
divmod_2 = divmod(1, 0.5)  # expects: (int, int)  ### divmod_2: (int, int)
divmod_3, divmod_4 = divmod(1, 2)  # expects: divmod_3: int, divmod_4: int  ### divmod_4: int, divmod_3: int
enumerate_1 = enumerate(["a", "b", "c"])  # expects: [ (int, str) ]  ### enumerate_1: [ (int, str) ]
enumerate_2 = enumerate([])  # expects: [ (int, object) ]  ### enumerate_2: [ (int, object) ]
enumerate_3 = enumerate(["a", 1, 0.5])  # expects: [ (int, object) ]  ### enumerate_3: [ (int, object) ]
enumerate_4 = enumerate("Hello")  # expects: [ (int, str) ]  ### enumerate_4: [ (int, str) ]
eval_1 = eval("1+1")  # expects: object  ### eval_1: object
eval_2 = eval("a+1", {"a": 1})  # expects: object  ### eval_2: object
eval_3 = eval("a+b", {"a": 1}, {"b": 2})  # expects: object  ### eval_3: object
exec_1 = exec("1+1")  # expects: object  ### exec_1: object
exec_2 = exec("a+1", {"a": 1})  # expects: object  ### exec_2: object
exec_3 = exec("a+b", {"a": 1}, {"b": 2})  # expects: object  ### exec_3: object
filter_1 = filter(callable, [ascii])  # expects: [ _typed_callable<(object) -> str> ]  ### filter_1: [ _typed_callable<(object) -> str> ]
filter_2 = filter(callable, [ascii, bin])  # expects: [ _callable ]  ### filter_2: [ _callable ]
filter_3 = filter(callable, [chr, hex])  # expects: [ _typed_callable<(int) -> str> ]  ### filter_3: [ _typed_callable<(int) -> str> ]
getattr_1 = getattr(123, "aaa", 567)  # expects: int  ### getattr_1: int
getattr_2 = getattr(123, "aaa", 0.5)  # expects: float  ### getattr_2: float
getattr_3 = getattr(123, "c")  # expects: object  ### getattr_3: object
globals_1 = globals()  # expects: { str : object }  ### globals_1: { str: object }
hasattr_1 = hasattr(123, "aaaa")  # expects: bool  ### hasattr_1: bool
hash_1 = hash(123)  # expects: int  ### hash_1: int
hash_2 = hash("hello")  # expects: int  ### hash_2: int
hash_3 = hash(chr)  # expects: int  ### hash_3: int
hex_1 = hex(123)  # expects: str  ### hex_1: str
hex_2 = hex(True)  # expects: str  ### hex_2: str
id_1 = id(123)  # expects: int  ### id_1: int
id_2 = id("hello")  # expects: int  ### id_2: int
id_3 = id(chr)  # expects: int  ### id_3: int
input_1 = input()  # expects: str  ### input_1: str
input_2 = input("hello")  # expects: str  ### input_2: str
input_3 = input(123)  # expects: str  ### input_3: str
len_1 = len("hello")  # expects: int  ### len_1: int
len_2 = len([1, 3])  # expects: int  ### len_2: int
len_3 = len((1, 3))  # expects: int  ### len_3: int
len_4 = len({1: 2, 3: 4})  # expects: int  ### len_4: int
locals_1 = locals()  # expects: { str : object }  ### locals_1: { str: object }
map_1 = map(chr, [1, 2, 3])  # expects: [ str ]  ### map_1: [ str ]
map_2 = map(abs, [1, 2, 3])  # expects: [ int ]  ### map_2: [ int ]
map_3 = map(abs, [0.5, 0.7])  # expects: [ float ]  ### map_3: [ float ]
map_4 = map(abs, [1, 0.5])  # expects: [ _numeric ]  ### map_4: [ _numeric ]
max_1 = max([1, 2])  # expects: int  ### max_1: int
max_1a = max(1, 2)  # expects: int  ### max_1a: int
max_2 = max([1, 2, 3])  # expects: int  ### max_2: int
max_2a = max(1, 2, 3)  # expects: int  ### max_2a: int
max_3 = max([1, 2, 3, 4])  # expects: int  ### max_3: int
max_3a = max(1, 2, 3, 4)  # expects: int  ### max_3a: int
max_4 = max([1, 2.4, 3])  # expects: _numeric  ### max_4: _numeric
max_4a = max(1, 2.4, 3)  # expects: _numeric  ### max_4a: _numeric
max_5 = max([1, 2, 3, 3.5])  # expects: _numeric  ### max_5: _numeric
max_5a = max(1, 2, 3, 3.5)  # expects: _numeric  ### max_5a: _numeric
max_6 = max([1.2, 3.4])  # expects: float  ### max_6: float
max_6a = max(1.2, 3.4)  # expects: float  ### max_6a: float
min_1 = min([1, 2])  # expects: int  ### min_1: int
min_1a = min(1, 2)  # expects: int  ### min_1a: int
min_2 = min([1, 2, 3])  # expects: int  ### min_2: int
min_2a = min(1, 2, 3)  # expects: int  ### min_2a: int
min_3 = min([1, 2, 3, 4])  # expects: int  ### min_3: int
min_3a = min(1, 2, 3, 4)  # expects: int  ### min_3a: int
min_4 = min([1, 2.4, 3])  # expects: _numeric  ### min_4: _numeric
min_4a = min(1, 2.4, 3)  # expects: _numeric  ### min_4a: _numeric
min_5 = min([1, 2, 3, 3.5])  # expects: _numeric  ### min_5: _numeric
min_5a = min(1, 2, 3, 3.5)  # expects: _numeric  ### min_5a: _numeric
min_6 = min([1.2, 3.4])  # expects: float  ### min_6: float
min_6a = min(1.2, 3.4)  # expects: float  ### min_6a: float
oct_1 = oct(123)  # expects: str  ### oct_1: str
oct_2 = oct(True)  # expects: str  ### oct_2: str
ord_1 = ord("s")  # expects: int  ### ord_1: int
ord_2 = ord(b"c")  # expects: int  ### ord_2: int
range_1 = range(10)  # expects: [ int ]  ### range_1: [ int ]
range_2 = range(0, 10)  # expects: [ int ]  ### range_2: [ int ]
range_3 = range(10, 0, -1)  # expects: [ int ]  ### range_3: [ int ]
range_4 = range(0, 10, +1)  # expects: [ int ]  ### range_4: [ int ]
repr_1 = repr(123)  # expects: str  ### repr_1: str
repr_2 = repr("asd")  # expects: str  ### repr_2: str
repr_3 = repr(abs)  # expects str  ### repr_3: str
repr_4 = repr([1, 2, 3, 4])  # expects: str  ### repr_4: str
reversed_1 = reversed([1, 2, 3, 4])  # expects: [ int ]  ### reversed_1: [ int ]
reversed_2 = reversed("abc")  # expects: [ str ]  ### reversed_2: [ str ]
round_1 = round(1)  # expects: int  ### round_1: int
round_2 = round(1, 2)  # expects: int  ### round_2: int
round_3 = round(1.2, 2)  # expects: float  ### round_3: float
setattr_1 = setattr(123, "aaaa", 213)  # expects: NoneType  ### setattr_1: NoneType
